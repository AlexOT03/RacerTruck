---
import Layout from '../layouts/Layout.astro';
import Header from '../sections/Header.astro';
import Footer from '../sections/Footer.astro';
import { Image } from "astro:assets";
import { images } from '../data/imagen-data'
import { getLangFromUrl, useTranslations } from "../i18n/utils";
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<Layout title="RacerTruck | List of Magazine">
    <main>
        <section class="text-center mx-auto max-w-screen-xl my-20">
            <h1 class="mt-1 text-4xl tracking-tight leading-10 font-extrabold text-gray-900 sm:leading-none sm:text-6xl lg:text-5xl xl:text-6xl ">
				{t('magazines.title')} 2024
			</h1>   
            <h2 class="mt-1 text-2xl text-gray-700 sm:text-7xl md:text-4xl lg:text-3xl xl:text-2xl">
                {t('magazines.subtitle')}
            </h2>
        </section>

        <section class="flex flex-wrap gap-14 justify-center items-center max-w-screen-xl mx-auto my-20">
            {images.map((img, index) => (
            <div class="flex flex-col justify-center items-center text-center">
                <a href={`/${img.id}`}>
                <Image
                    class="magazine"
                    src={img.src}
                    width={300}
                    height={400}
                    alt={img.alt}
                    loading={
                        index in [0, 1, 2] ? 'eager' : 'lazy'
                    }
                />
                </a>
                <p class="text-center p-7 uppercase text-lg font-bold">{img.date}</p>
            </div>

            ))}
        </section>

		<Footer title={t('footer.title')} />
	</main>
    
</Layout>

<style>
    .magazine {
        transition: box-shadow 0.1s, transform 0.1s;
        max-width: 100%;
    }

    .magazine:hover {
        box-shadow: 0 0 40px rgba(0, 0, 0, 0.9);
    }
</style>

<script>
    document.querySelectorAll('.magazine').forEach(el => {
        el.addEventListener('mousemove', (evt) => {
            const element = el as HTMLElement;
            const { offsetWidth: width, offsetHeight: height } = element;
            const { offsetX, offsetY } = evt as MouseEvent;

            const yRotation = ((offsetX - width / 2) / width) * 20;
            const xRotation = ((offsetY - height / 2) / height) * 20;

            element.style.transform = `
                perspective(500px)
                scale(1.1)
                rotateX(${xRotation}deg)
                rotateY(${yRotation}deg)
            `;
        });

        el.addEventListener('mouseout', () => {
            const element = el as HTMLElement;
            element.style.transform = `
                perspective(500px)
                scale(1)
                rotateX(0)
                rotateY(0)
            `;
        });
    });
</script>
